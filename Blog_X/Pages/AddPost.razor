@page "/Post"

@inject IPostInterface postservice
<div class="">

<EditForm Model="newPost" OnValidSubmit="AddPosts">
    <div class="form-group p-2">
        <label for="name">Title</label>
        <InputText type="Title" class="form-control p-2" id="Title" @bind-Value="@newPost.Title" aria-describedby="name" />
        <ValidationMessage For="@(()=>newPost.Title)" />
    </div>
    <div class="form-group p-2">
        <label for="name">Description</label>
        <InputText type="Description" class="form-control p-2" id="Description" @bind-Value="@newPost.Description" aria-describedby="name" />
        <ValidationMessage For="@(()=>newPost.Description)" />
    </div>
    <div class="form-group p-2">
        <label for="name">ImageUrl</label>
        <InputText type="ImageUrl" class="form-control p-2" id="ImageUrl" @bind-Value="@newPost.ImageUrl" aria-describedby="name" />
        <ValidationMessage For="@(()=>newPost.ImageUrl)" />
    </div>
    <div class="flex-row m-2" p-2>
        <button type="submit" style="width:100px" class=" p-2 m-1 btn btn-primary">Post</button>
    </div>
</EditForm>
    
</div>

@code{
    private PostDto newPost = new PostDto();

     [CascadingParameter]
    public Task<AuthenticationState> _authState { get; set; }

    private async Task AddPosts(){
        var authstate = await _authState;
        var userId = authstate.User.FindFirst("sub")?.Value;
        newPost.UserId = Guid.Parse(userId);
        var res = await postservice.AddPostAsync(newPost);

        newPost.Title = "";
        newPost.Description = "";
        newPost.ImageUrl = "";
        Console.WriteLine(res);
    }
}